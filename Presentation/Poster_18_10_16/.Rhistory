diag(-\1,3,3,)
diag(-1,3,3,)
diag(runif(5,-1,1))
diag(runif(5,-1,1),1)
Diag(runif(5,-1,1),1)
diag(runif(5,-1,1),1)
diag(runif(5,-1,1),k=1)
diag(runif(5,-1,1),-1)
diag(runif(5,-1,1),3,3-1)
diag(runif(5,-1,1),3,3,-1)
diag(c(-1,3,3),1)
diag(c(-1,3,3)1)
diag(runif(5,-1,1),-1)
Diag(runif(5,-1,1),-1)
library(igraph)
library(ggplot2)
require(reshape2)
k=10;
p=0.5;
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
x11()
G=graph.adjacency(A)
G= as.undirected(G, mode='collapse')
# Plotting the adjacency matrix with ggplot 2 as a heatmap on a grid
# Require pakages ggplot2 and reshape2
A1=melt(A) #reshape data to look like xy coordinate
names(A1)=c("x","y","color")
A1$color=factor(A1$color>0) # make the cuttof into a factor
levels(A1$color)=c("0","1")
qplot(x, y, fill=color, data=A1,geom='tile') # calling ggplot
# Plottng the graph
plot(G,
#layout = layout_with_dh,
vertex.label = NA,
vertex.size = 1,
#vertex.color= V(G)$color,
vertex.frame.color= "white",
edge.arrow.size = 1,
edge.color='blue')
library(igraph)
library(ggplot2)
require(reshape2)
k=100;
p=0.5;
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
x11()
G=graph.adjacency(A)
G= as.undirected(G, mode='collapse')
# Plotting the adjacency matrix with ggplot 2 as a heatmap on a grid
# Require pakages ggplot2 and reshape2
A1=melt(A) #reshape data to look like xy coordinate
names(A1)=c("x","y","color")
A1$color=factor(A1$color>0) # make the cuttof into a factor
levels(A1$color)=c("0","1")
qplot(x, y, fill=color, data=A1,geom='tile') # calling ggplot
# Plottng the graph
plot(G,
#layout = layout_with_dh,
vertex.label = NA,
vertex.size = 1,
#vertex.color= V(G)$color,
vertex.frame.color= "white",
edge.arrow.size = 1,
edge.color='blue')
library(igraph)
library(ggplot2)
require(reshape2)
k=100;
p=0.5;
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
x11()
G=graph.adjacency(A)
G= as.undirected(G, mode='collapse')
# Plotting the adjacency matrix with ggplot 2 as a heatmap on a grid
# Require pakages ggplot2 and reshape2
A1=melt(A) #reshape data to look like xy coordinate
names(A1)=c("x","y","color")
A1$color=factor(A1$color>0) # make the cuttof into a factor
levels(A1$color)=c("0","1")
qplot(x, y, fill=color, data=A1,geom='tile') # calling ggplot
# Plottng the graph
plot(G,
#layout = layout_with_dh,
vertex.label = NA,
vertex.size = 1,
#vertex.color= V(G)$color,
vertex.frame.color= "white",
edge.arrow.size = 1,
edge.color='blue')
plot(G,
#layout = layout_with_dh,
vertex.label = NA,
vertex.size = 1,
#vertex.color= V(G)$color,
vertex.frame.color= "white",
edge.arrow.size = 1,
edge.color='blue')
G=graph.adjacency(A)
library(igraph)
1:7
(1:7)''
(1:7)'
""
=
t
end
quickplot()
=\
3
3=
3
""
''
t(1:3)
t(1:3)*(1:3)
(1:3)*t(1:3)
(1:3)*(1:3)
(1:3)$*$(1:3)
(1:3)%*%(t(1:3))
(1:3)%*%(-t(1:3))
(1:3)%*%(0*t(1:3)+1)
B=(1:k)%*%(0*t(1:k)+1) -(0*t(1:k)+1)%*%(1:k)
(0*t(1:k)+1)%*%(1:k)
(0*(1:k)+1)%*%t(1:k)
B=(1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k))
k=10;
B=(1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k))
B
C = 1*(B>0)
C
C = 1*(abs(B)<3)
C
C = B%*%(abs(B)<3)
C
C = B*(abs(B)<3)
C
C = 1*(abs(B)<3)
C
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
B= rdiag*matrix(runif(k**2,-10,10),nrow=p);
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
p=0.5;
r=5;
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
B= rdiag*matrix(runif(k**2,-10,10),nrow=p);
matrix(runif(k**2,-10,10),nrow=p)
rbinom(k**2,1,p)
B= rdiag*matrix(runif(k**2,-10,10),nrow=k);
qplot(x, y, fill=color, data=B,geom='tile') # calling ggplot
B1=melt(B) #reshape data to look like xy coordinate
names(B1)=c("x","y","color")
B1$color=factor(B1$color>0) # make the cuttof into a factor
levels(B1$color)=c("0","1")
qplot(x, y, fill=color, data=B1,geom='tile') # calling ggplot
qplot(x, y, fill=color, data=B1,geom='tile') # calling ggplot
qplot(x, y, fill=color, data=A1,geom='tile') # calling ggplot
qplot(x, y, fill=color, data=B1,geom='tile') # calling ggplot
k=100;
p=0.5;
r=5;
# Adjacency matrix
A= matrix(rbinom(k**2,1,p),nrow=k);
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
B= rdiag*matrix(runif(k**2,-10,10),nrow=k);
B1=melt(B) #reshape data to look like xy coordinate
names(B1)=c("x","y","color")
B1$color=factor(B1$color>0) # make the cuttof into a factor
levels(B1$color)=c("0","1")
qplot(x, y, fill=color, data=B1,geom='tile') # calling ggplot
heatmap(B)
B
heatmap(B, Colv = NA, Rowv = NA, scale="column")
heatmap(B, Colv = NA, Rowv = NA, scale="column", col= colorRampPalette(brewer.pal(8, "Blues"))(25))
library(RColorBrewer)
heatmap(B, Colv = NA, Rowv = NA, scale="column", col= colorRampPalette(brewer.pal(8, "Blues"))(25))
heatmap(B, Colv = NA, Rowv = NA, scale="column")
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
B= rdiag*matrix(runif(k**2,-10,10),nrow=k);
heatmap(B, Colv = NA, Rowv = NA, scale="column")
x11()
heatmap(B, Colv = NA, Rowv = NA, scale="column")
x11()
heatmap(B, Colv = NA, Rowv = NA, scale="column",labRow = FALSE)
heatmap(B, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r);
B= rdiag*matrix(runif(k**2,-10,10),nrow=k);
x11()
heatmap(B, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*matrix(runif(k**2,-10,10),nrow=k);
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
heatmap(rdiag, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
rdiag[1,100]
rdiag[1,1]
rdiag[100,100]
rdiag[1,10]
rdiag[1,200]
rdiag[1,20]
rdiag[1,21]
rdiag[1,22]
rdiag[1,23]
rdiag[1,]
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
# Graph
# A finite propagation operator
#
k=100;
r=20;
rdiag=1*(abs((1:k)%*%(0*t(1:k)+1) -(0*(1:k)+1)%*%(t(1:k)))<r); #characteristic function of {x,y | d(xy)<r}
A= rdiag*(matrix(runif(k**2,-10,10),nrow=k));
#Multiplying a matrix of iid uniform on (-10,10) by rdiag yields the cuttoff to the r-diag
x11()
heatmap(A, Colv = NA, Rowv = NA, scale="column",labRow = FALSE,labCol = FALSE)
# Simple heatmap
# Colv and Rowv are set to NA so that the function doesn't permut rows and columns
# (automaticly regroup similar col and rows)
# Possible change of colors with library(RColorBrewer)
# and the option col= colorRampPalette(brewer.pal(8, "Blues"))(25) in the heatmap
